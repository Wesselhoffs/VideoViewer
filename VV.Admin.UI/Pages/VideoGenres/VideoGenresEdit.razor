@inject IAdminService AdminService
<div class="d-xxl-flex justify-content-center">
	<EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="border border-dark rounded p-3 w-25 shadow-lg">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<h4>@Page Genre</h4>
		<div class="mb-3">
			@if (Page.Equals(PageType.Delete))
			{
				<InputNumber id="videoid" class="form-control" @bind-Value="Model.VideoId" disabled placeholder="Video Id"></InputNumber>
				<ValidationMessage For="@(() => Model.VideoId)" />

				<InputNumber id="title" class="form-control" @bind-Value="Model.GenreId" disabled placeholder="Genre Id"></InputNumber>
				<ValidationMessage For="@(() => Model.GenreId)" />

			}
			@if (Page.Equals(PageType.Create))
			{
				<InputNumber id="videoid" class="form-control" @bind-Value="Model.VideoId" placeholder="Video Id"></InputNumber>
				<ValidationMessage For="@(() => Model.VideoId)" />

				<InputNumber id="title" class="form-control" @bind-Value="Model.GenreId" placeholder="Genre Id"></InputNumber>
				<ValidationMessage For="@(() => Model.GenreId)" />
								}
		</div>
		
		<button type="submit" class="btn px-3 btn-outline-@(Page.Equals(PageType.Delete) ? "danger" : "primary")">@Page</button>
	</EditForm>
</div>

@code {
	[Parameter] public VideoGenreDTO Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = "";
	[Parameter] public EventCallback<string> OnChange { get; set; }

	private async Task OnFormSubmit()
	{
		try
		{
			if (Page.Equals(PageType.Create))
			{
				await AdminService.CreateRefAsync<VideoGenreDTO>("VideoGenres", new VideoGenreDTO
					{
						VideoId = Model.VideoId,
						GenreId = Model.GenreId
					});
			}
			else if (Page.Equals(PageType.Delete))
				await AdminService.DeleteRefAsync<VideoGenreDTO>($"VideoGenres", Model);

			await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("Something went wrong.");
		}
	}

	//protected override async Task OnInitializedAsync()
	//{
		
	//}
}
