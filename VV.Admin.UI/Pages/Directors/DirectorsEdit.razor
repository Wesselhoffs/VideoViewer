@inject IAdminService AdminService
<div class="d-xxl-flex justify-content-center">
	<EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="border border-dark rounded p-3 w-25 shadow-lg">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<h4>@Page Director</h4>
		<div class="mb-3">
			@if (Page.Equals(PageType.Delete))
			{
				<InputText id="title" class="form-control" @bind-Value="Model.Name" disabled placeholder="Name"></InputText>
			}
			@if (Page.Equals(PageType.Edit) || Page.Equals(PageType.Create))
			{
				<InputText id="title" class="form-control" @bind-Value="Model.Name" placeholder="Name"></InputText>
			}
			<ValidationMessage For="@(() => Model.Name)" />
		</div>

		<button type="submit" class="btn px-3 btn-outline-@(Page.Equals(PageType.Delete) ? "danger" : "primary")">@Page</button>
	</EditForm>
</div>

@code {
	[Parameter] public DirectorDTO Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = "";
	[Parameter] public EventCallback<string> OnChange { get; set; }

	private async Task OnFormSubmit()
	{
		try
		{
			if (Page.Equals(PageType.Create))
			{
				await AdminService.CreateAsync<DirectorCreateDTO>("Directors", new DirectorCreateDTO
					{
						Name = Model.Name
					});
			}
			else if (Page.Equals(PageType.Edit))
			{
				await AdminService.EditAsync<DirectorDTO>($"Directors/{Model.Id}", Model);

			}
			else if (Page.Equals(PageType.Delete))
				await AdminService.DeleteAsync<DirectorDTO>($"Directors/{Model.Id}");

			await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("Couldn't create/edit/delete the course.");
		}
	}
}