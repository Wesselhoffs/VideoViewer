@inject IAdminService AdminService
<div class="d-xxl-flex justify-content-center">
	<EditForm Model="@Model" OnInvalidSubmit="@OnFormSubmit" class="border border-dark rounded p-3 w-25 shadow-lg">
        <DataAnnotationsValidator/>
		<h4>@Page Video</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputText id="title" class="form-control" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
            } 
            @if (Page.Equals(PageType.Edit) || Page.Equals(PageType.Create))
            {
                <InputText id="title" class="form-control" @bind-Value="Model.Title" placeholder="Title"></InputText>
            }
        </div>
        @if (!Page.Equals(PageType.Delete))
        {
            <div class="mb-3">
                <InputText id="description" class="form-control" @bind-Value="Model.Description" placeholder="Description"></InputText>
            </div>
        }
	</EditForm>
</div>

@code {
	[Parameter] public VideoDTO Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = "";
	[Parameter] public EventCallback<string> OnChange { get; set; }
	public List<DirectorDTO> Directors { get; set; } = new();
	public List<GenreDTO> Genres { get; set; } = new();
	public List<SimilarVideoDTO> SimilarVideos { get; set; } = new();

    private async Task OnFormSubmit()
    {
        try
        {
            if (Page.Equals(PageType.Create))
                await AdminService.CreateAsync<VideoDTO>("Videos", Model);
            else if (Page.Equals(PageType.Edit))
                await AdminService.EditAsync<VideoDTO>($"Videos/{Model.Id}", Model);
            else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<VideoDTO>($"Videos/{Model.Id}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the course.");
        }
    }

	protected override async Task OnInitializedAsync()
	{
		Directors = await AdminService.GetAsync<DirectorDTO>("Directors");
		Genres = await AdminService.GetAsync<GenreDTO>("Genres");
	}
}
